AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  push-notification

  Sample SAM Template for push-notification

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: java11
    Timeout: 180

Parameters:
  SNS_Platform_Domain:
    Type: String
    Description: SNS_Platform_Domain
    Default: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:app/"

  SNS_Topic_Domain:
    Type: String
    Description: SNS_Topic_Domain
    Default: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:"

Resources:
  #  ApiKey:
  #    Type: "AWS::ApiGateway::ApiKey"
  #    #    DependsOn: [ApiUsagePlan]
  #    Properties:
  #      Name: !Join [ "", [ { "Ref": "AWS::StackName" }, "-apikey" ] ]
  #      Description: SNS API Key V1
  #      Enabled: 'true'
  #      StageKeys:
  #        - RestApiId: !Ref AWSServerlessApi
  #          StageName: DEV
  #  ApiUsagePlan:
  #    Type: "AWS::ApiGateway::UsagePlan"
  #    DependsOn:
  #      - ServerlessHttpApiProdStage
  #    Properties:
  #      ApiStages:
  #        - ApiId: !Ref ServerlessHttpApi
  #          Stage: Prod
  #      Description: !Join [ " ", [ { "Ref": "AWS::StackName" }, "usage plan" ] ]
  #      Quota:
  #        Limit: 1000
  #        Period: MONTH
  #      UsagePlanName: !Join [ "", [ { "Ref": "AWS::StackName" }, "-usage-plan" ] ]

  #  ApiUsagePlanKey:
  #    Type: "AWS::ApiGateway::UsagePlanKey"
  #    DependsOn:
  #      - ServerlessHttpApi
  #    Properties:
  #      KeyId: !Ref ApiKey
  #      KeyType: API_KEY
  #      UsagePlanId: !Ref ApiUsagePlan

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  LambdaGroupPolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "SnsPublishPolicies"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: SNSLogPolicy
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*"
          - Sid: APIAccessForDynamoDB
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:CreateTable
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
            Resource:
              - !GetAtt InboxRecord.Arn
              - !GetAtt AckRecord.Arn
              - !GetAtt TopicSubscription.Arn
              - Fn::Join:
                  - "/"
                  - - { "Fn::GetAtt": [ "InboxRecord", "Arn" ] }
                    - "index/*"
              - Fn::Join:
                  - "/"
                  - - { "Fn::GetAtt": [ "AckRecord", "Arn" ] }
                    - "index/*"
              - Fn::Join:
                  - "/"
                  - - { "Fn::GetAtt": [ "TopicSubscription", "Arn" ] }
                    - "index/*"
          - Sid: SNSPulishPolicy
            Effect: Allow
            Action:
              - sns:ListTopics
              - sns:Publish
              - sns:ListSubscriptionsByTopic
              - sns:Subscribe
              - sns:CreatePlatformEndpoint
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:sns:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*"
      Roles:
        - Ref: "LambdaExecutionRole"

  RegisterDeviceTokenFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: PushNotificationFunction/
      Handler: RegisterDeviceToken::handleRequest
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterDeviceTokenAPI:
          Type: Api
          Properties:
            Path: /registerDeviceToken
            Method: POST
            Environment:
              Variables:
                SNS_Platform_Domain: !Ref SNS_Platform_Domain
  #            Auth:
  #              ApiKeyRequired: true

  SendNotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: PushNotificationFunction/
      Handler: SendNotification::handleRequest
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        SendNotificationAPI:
          Type: Api
          Properties:
            #            RestApiId: !Ref AWSServerlessApi
            Path: /sendNotification
            Method: POST
  #            Auth:
  #              ApiKeyRequired: true

  StoreAckRecordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: PushNotificationFunction/
      Handler: StoreAckRecord::handleRequest
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        StoreAckRecordFunctionAPI:
          Type: Api
          Properties:
            Path: /storeAckRecord
            Method: POST
  #            Auth:
  #              ApiKeyRequired: true

  RetrieveInboxRecordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: PushNotificationFunction/
      Handler: RetrieveInboxRecord::handleRequest
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_Topic_Domain: !Ref SNS_Topic_Domain
          SNS_ARN_PREFIX: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:"
      Events:
        RetrieveInboxRecordFunctionAPI:
          Type: Api
          Properties:
            Path: /retrieveInboxRecord
            Method: POST
  #            Auth:
  #              ApiKeyRequired: true

  InboxRecord:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "msg_id"
          AttributeType: "S"
        - AttributeName: "msg_timestamp"
          AttributeType: "S"
        - AttributeName: "target_arn"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "msg_id"
          KeyType: "HASH"
      TableName: "InboxRecord"
      GlobalSecondaryIndexes:
        - IndexName: "TargetArn-MsgTimestamp-GSI"
          KeySchema:
            - AttributeName: "target_arn"
              KeyType: "HASH"
            - AttributeName: "msg_timestamp"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

  AckRecord:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "app_reg_id"
          AttributeType: "S"
        - AttributeName: "msg_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "app_reg_id"
          KeyType: "HASH"
        - AttributeName: "msg_id"
          KeyType: "RANGE"
      TableName: "AckRecord"
      LocalSecondaryIndexes:
        - IndexName: "AppRegId-MsgId-LSI"
          KeySchema:
            - AttributeName: "app_reg_id"
              KeyType: "HASH"
            - AttributeName: "msg_id"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

  TopicSubscription:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "app_reg_id"
          AttributeType: "S"
        - AttributeName: "topic_arn"
          AttributeType: "S"
        - AttributeName: "app_name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "app_reg_id"
          KeyType: "HASH"
        - AttributeName: "topic_arn"
          KeyType: "RANGE"
      TableName: "TopicSubscription"
      LocalSecondaryIndexes:
        - IndexName: "AppRegId-TopicArn-LSI"
          KeySchema:
            - AttributeName: "app_reg_id"
              KeyType: "HASH"
            - AttributeName: "topic_arn"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      GlobalSecondaryIndexes:
        - IndexName: "AppRegId-AppName-GSI"
          KeySchema:
            - AttributeName: "app_reg_id"
              KeyType: "HASH"
            - AttributeName: "app_name"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "AppName-Sorting-GSI"
            KeySchema:
              - AttributeName: "app_name"
                KeyType: "HASH"
            Projection:
              NonKeyAttributes:
                - "create_datetime"
                - "app_reg_id"
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: '1'
              WriteCapacityUnits: '1'
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

  ApplicationTopic:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "app_name"
          AttributeType: "S"
        - AttributeName: "topic"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "app_name"
          KeyType: "HASH"
        - AttributeName: "topic"
          KeyType: "RANGE"
      TableName: "ApplicationTopic"
      LocalSecondaryIndexes:
        - IndexName: "AppName-Topic-LSI"
          KeySchema:
            - AttributeName: "app_name"
              KeyType: "HASH"
            - AttributeName: "topic"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

  ApplicationPlatform:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "platform_arn"
          AttributeType: "S"
        - AttributeName: "app_name"
          AttributeType: "S"
        - AttributeName: "platform"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "platform_arn"
          KeyType: "HASH"
        - AttributeName: "app_name"
          KeyType: "RANGE"
      TableName: "ApplicationPlatform"
      GlobalSecondaryIndexes:
        - IndexName: "AppName-Platform-GSI"
          KeySchema:
            - AttributeName: "app_name"
              KeyType: "HASH"
            - AttributeName: "platform"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

  RegisterDeviceTokenAPI:
    Description: "API Gateway endpoint URL for Prod stage for Send Notification Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/registerDeviceToken/"
  RegisterDeviceTokenFunction:
    Description: "Register Device Token Lambda Function ARN"
    Value: !GetAtt RegisterDeviceTokenFunction.Arn

  SendNotificationAPI:
    Description: "API Gateway endpoint URL for Prod stage for Send Notification Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sendNotification/"
  SendNotificationFunction:
    Description: "Send Notification Lambda Function ARN"
    Value: !GetAtt SendNotificationFunction.Arn

  StoreAckRecordAPI:
    Description: "API Gateway endpoint URL for Prod stage for Store Ack Record Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/storeAckRecord/"
  StoreAckRecordFunction:
    Description: "Store Ack Record Lambda Function ARN"
    Value: !GetAtt StoreAckRecordFunction.Arn

  RetrieveInboxRecordAPI:
    Description: "API Gateway endpoint URL for Prod stage for Store Ack Record Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/retrieveInboxRecord/"
  RetrieveInboxRecordFunction:
    Description: "Store Ack Record Lambda Function ARN"
    Value: !GetAtt RetrieveInboxRecordFunction.Arn

  InboxRecord:
    Description: "InboxRecord's ARN"
    Value: !GetAtt InboxRecord.Arn
  AckRecord:
    Description: "AckRecord's ARN"
    Value: !GetAtt AckRecord.Arn
  TopicSubscription:
    Description: "TopicSubscription's ARN"
    Value: !GetAtt TopicSubscription.Arn
  ApplicationTopic:
    Description: "ApplicationTopic's ARN"
    Value: !GetAtt ApplicationTopic.Arn
